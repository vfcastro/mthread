#include "../include/mthread.h"
#include "../include/mdata.h"

TCB_t *MAIN = NULL;
TCB_t *EXEC = NULL;
TCB_t *HIGH_QUEUE = NULL;
TCB_t *MEDIUM_QUEUE = NULL;
TCB_t *LOW_QUEUE = NULL;
int TID = 0;

int main_init();
int get_tid();
void mfinish();
void dispatcher(TCB_t *thread);
int scheduler_insert(TCB_t *thread);
int queue_insert(TCB_t **queue, TCB_t *thread);
void scheduler();
TCB_t* queue_remove(TCB_t **queue);

int mcreate (int prio, void* (*start)(void*), void *arg)
{
	if(main_init() == ERROR)
		return ERROR;
	
	TCB_t *newThread = (TCB_t*)malloc(sizeof(TCB_t));
	ucontext_t *newContext = (ucontext_t*) malloc(sizeof(ucontext_t));
	ucontext_t *endContext = (ucontext_t*) malloc(sizeof(ucontext_t));
	void *new_stack = (char*) malloc(STACKSIZE);
	void *end_stack = (char*) malloc(STACKSIZE);
	
	if(newThread != NULL && newContext != NULL && endContext != NULL && new_stack != NULL && end_stack != NULL){
		getcontext(newContext);
		newContext->uc_stack.ss_sp = new_stack;
		newContext->uc_stack.ss_size = STACKSIZE;
		newContext->uc_link = endContext;
		makecontext(newContext, (void (*)(void))start, 1, arg);

		getcontext(endContext);
		endContext->uc_stack.ss_sp = end_stack;
		endContext->uc_stack.ss_size = STACKSIZE;
		endContext->uc_link = NULL;
		makecontext(endContext, mfinish, 0);
		
		newThread->tid = get_tid();
		newThread->state = STATE_READY;
		newThread->prio = prio;
		newThread->context = *(newContext);
		newThread->prev = NULL;
		newThread->next = NULL;

		if(scheduler_insert(newThread) == ERROR)
			return ERROR;
		return newThread->tid;
	}
}


int main_init()
{	
	ucontext_t *main_context = (ucontext_t*) malloc(sizeof(ucontext_t));
	if(main_context == NULL)
		return ERROR;
	
	getcontext(main_context);
	if(MAIN == NULL){
		MAIN = (TCB_t*)malloc(sizeof(TCB_t));
		if(MAIN == NULL)
			return ERROR;
		
		MAIN->tid = 0;
		MAIN->state = STATE_RUNNING;
		MAIN->prio = 0;
		MAIN->context = *(main_context);
		MAIN->prev = NULL;
		MAIN->next = NULL;
		EXEC = MAIN;
		setcontext(main_context);
	}
	return SUCCESS;
}

int get_tid()
{
	return ++TID;
}

void mfinish()
{
	
	scheduler();

}

void dispatcher(TCB_t *thread)
{
	if(thread != NULL){
		thread->state = STATE_RUNNING;
		EXEC = thread;
		setcontext(&((*EXEC).context));
	}
}

int scheduler_insert(TCB_t *thread)
{
	switch(thread->prio){
		case HIGH_PRIO:
			if(queue_insert(&HIGH_QUEUE,thread) == ERROR)
				return ERROR;
			return SUCCESS;
		case MEDIUM_PRIO:
			if(queue_insert(&MEDIUM_QUEUE,thread) == ERROR)
				return ERROR;
			return SUCCESS;
		case LOW_PRIO:
			if(queue_insert(&LOW_QUEUE,thread) == ERROR)
				return ERROR;
			return SUCCESS;
		default:
			return ERROR;
	}
}

int queue_insert(TCB_t **queue, TCB_t *thread)
{
	TCB_t **ptaux = queue;

	if(*queue == NULL){
		*queue = thread;
		return SUCCESS;		
	}
	
	if((*queue)->next == NULL){
		(*queue)->next = thread;
		return SUCCESS;
	}
	
	while((*ptaux)->next != NULL)
		(*ptaux) = (*ptaux)->next;	
	
	(*ptaux)->next = thread;
	return SUCCESS;
}

void scheduler()
{	
	TCB_t *thread;

	if(HIGH_QUEUE != NULL){
		thread = queue_remove(&HIGH_QUEUE);
		dispatcher(thread);			
	}

	if(MEDIUM_QUEUE != NULL){
		thread = queue_remove(&MEDIUM_QUEUE);
		dispatcher(thread);			
	}

	if(LOW_QUEUE != NULL){
		thread = queue_remove(&LOW_QUEUE);
		dispatcher(thread);			
	}		
}

TCB_t* queue_remove(TCB_t** queue)
{	
	TCB_t **ptaux = queue;

	if(*queue == NULL){
		return NULL;		
	}
	
	if((*queue)->next == NULL){
		*queue = NULL;
		return *ptaux;
	}
			
	*queue = (*ptaux)->next;
	return *ptaux;
}



int myield(void)
{
	TCB_t *currThread = EXEC;
	currThread->state = STATE_READY;
	getcontext(&((*currThread).context)
	
	if(currThread->tid == EXEC->tid)


		scheduler_insert(EXEC)
		scheduler();
}





int mwait(int tid);
int mmutex_init(mmutex_t *mtx);
int mlock (mmutex_t *mtx);
int munlock (mmutex_t *mtx);
